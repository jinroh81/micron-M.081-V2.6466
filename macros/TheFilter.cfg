#####################################################################
#####################################################################
#  TheFilter.cfg
#####################################################################
#####################################################################

#####################################################################
#   FilterMain/Slave
#####################################################################

############### Config options ##################

[gcode_macro _FilterMainVARS]
variable_threshold: 100		# If bed temp target is above this threshold, fans will be enabled. If temp is set to below this threshold, fans will be disabled.
variable_fast: 1		# Fan speed once bed temp is reached  
variable_slow: 0.5		# Fan speed while bed is heating
gcode:


[fan_generic FilterMain]
pin: PE5
cycle_time: 0.05
kick_start_time: 0.5

[fan_generic FilterSlave]
pin: PC12
cycle_time: 0.05
kick_start_time: 0.5


########## Aliases #########

[gcode_macro FilterMainSLOW]
gcode:
	# Vars
	{% set SLOW = printer["gcode_macro _FilterMainVARS"].slow|float %}
	
	SET_FAN_SPEED FAN=FilterMain SPEED={SLOW}
    SET_FAN_SPEED FAN=FilterSlave SPEED={SLOW}

[gcode_macro FilterMainFAST]
gcode:
	# Vars
	{% set FAST = printer["gcode_macro _FilterMainVARS"].fast|float %}
	
	SET_FAN_SPEED FAN=FilterMain SPEED={FAST}
    SET_FAN_SPEED FAN=FilterSlave SPEED={FAST}

[gcode_macro FilterMainOFF]
gcode:
	SET_FAN_SPEED FAN=FilterMain SPEED=0
    SET_FAN_SPEED FAN=FilterSlave SPEED=0

############ Command overrides ############

# Override, set fan speeds to low and start monitoring loop.
[gcode_macro SET_HEATER_TEMPERATURE]
rename_existing: _SET_HEATER_TEMPERATURE
gcode:
	# Parameters
	{% set HEATER = params.HEATER|default("None") %}
	{% set TARGET = params.TARGET|default(0)|int %}
	# Vars
	{% set THRESHOLD = printer["gcode_macro _FilterMainVARS"].threshold|int %}
	
	{% if HEATER|lower == "extruder" %}
		M104 S{TARGET}
	{% elif HEATER|lower == "heater_bed" %}
		M99140 S{TARGET}
	{% else %}
		{action_respond_info("Heater %s not supported" % HEATER)}
	{% endif %}

	# Set fans to low if heater_bed temp is requested above threshold temp, and kick off monitoring loop.
	{% if HEATER|lower == "heater_bed" %}
		{% if TARGET >= THRESHOLD %}
			FilterMainSLOW
			UPDATE_DELAYED_GCODE ID=FilterMainloop DURATION=1
		{% else %}
			FilterMainOFF
			UPDATE_DELAYED_GCODE ID=FilterMainloop DURATION=0 #	Cancel bed fan loop if it's running
		{% endif %}
	{% endif %}
	
# Override M190 (Wait for Bed Temperature)
# As a bonus, use TEMPERATURE_WAIT so we don't have to wait for PID to level off.
[gcode_macro M190]
rename_existing: M99190
gcode:
	# Parameters
	{% set S = params.S|int %}
	# Vars
	{% set THRESHOLD = printer["gcode_macro _FilterMainVARS"].threshold|int %}
	
	{% if S >= THRESHOLD %}
		FilterMainSLOW																# >= Threshold temp: Low speed fans while heating 
	{% else %}
		FilterMainOFF																# < Threshold temp: Turn bed fans off
	{% endif %}                                        

	M140 {% for p in params
	  %}{'%s%s' % (p, params[p])}{%
	  endfor %}																	# Set bed temp
	  
	{% if S != 0 %}
		TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}	# Wait for bed temp within 5 degrees
	{% endif %}

	# Post-heating fan speeds
	{% if S >= THRESHOLD %}								    
		FilterMainFAST																# >= Threshold temp: Higher speed fans after heating finished
	{% endif %}
	
# Replace M140 (Set Bed Temperature) to just be an alias of SET_HEATER_TEMPERATURE (which has associated bed fan logic if enabled)
[gcode_macro M140]
rename_existing: M99140
gcode:
	# Parameters
	{% set S = params.S|float %}
	
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}
	
# Replace TURN_OFF_HEATERS
[gcode_macro TURN_OFF_HEATERS]
rename_existing: _TURN_OFF_HEATERS
gcode:
	FilterMainOFF
	_TURN_OFF_HEATERS
	
################ Monitoring loop #####################

# Turns bed fans to "fast" speed once target bed temp is reached.
[delayed_gcode FilterMainloop]
gcode:
	# Vars
	{% set THRESHOLD = printer["gcode_macro _FilterMainVARS"].threshold|int %}
	
	{% if printer.heater_bed.target >= THRESHOLD %}								# Continue only if target temp greater than threshold.
		{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}
			FilterMainFAST															# If within 1 degree of target temp: Higher speed fans
		{% else %}
			UPDATE_DELAYED_GCODE ID=FilterMainloop DURATION=5						# If temp not reached yet: loop again
		{% endif %}
	{% endif %}


#####################################################################
#   FilterMonitor Main
#####################################################################


[filter_monitor FilterMain]
fan: fan_generic FilterMain # e.g fan_generic bed_filter, heater_generic heated_chamber, etc
max_runtime_hours: 50 # Defaults to 50 hours
max_days: 30 # Defaults to 30 days
interval: 30 # Defaults to 30 seconds
stats_caption: ""
# Output override for FILTER_STATS macro. Defaults to "<filter_name> at". e.g. Air Filter at 98%
expiry_gcode: # Executed when filter meets threshold condition
path: ~/printer_data/config/macros # Folder where filter data is stored

[gcode_macro FilterMain_Status]
	gcode:
     FILTER_STATS NAME=FilterMain [EXTENDED=1]


[gcode_macro FilterMain_Reset]
gcode:
     RESET_FILTER NAME=FilterMain
     
#####################################################################
#   FilterMonitor Slave
#####################################################################


[filter_monitor FilterSlave]
fan: fan_generic FilterSlave # e.g fan_generic bed_filter, heater_generic heated_chamber, etc
max_runtime_hours: 50 # Defaults to 50 hours
max_days: 30 # Defaults to 30 days
interval: 30 # Defaults to 30 seconds
stats_caption: ""
# Output override for FILTER_STATS macro. Defaults to "<filter_name> at". e.g. Air Filter at 98%
expiry_gcode: # Executed when filter meets threshold condition
path: ~/printer_data/config/macros # Folder where filter data is stored

[gcode_macro FilterSlave_Status]
	gcode:
     FILTER_STATS NAME=FilterSlave [EXTENDED=1]


[gcode_macro FilterSlave_Reset]
gcode:
     RESET_FILTER NAME=FilterSlave


