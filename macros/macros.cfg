#####################################################################
#####################################################################
#  Macros
#####################################################################
#####################################################################


#####################################################################
#  Start Script
#####################################################################

[gcode_macro START_PRINT]
gcode:
    {% set target_bed = params.BED|int %}
    {% set target_extruder = params.EXTRUDER|int %}
	
	G28
    G90
    M190 S{target_bed} ; set & wait for bed temp
    M109 S 150
        BED_MESH_CLEAR
	QUAD_GANTRY_LEVEL
    G28 Z
    BED_MESH_CALIBRATE adaptive=1 
    M109 S{target_extruder}
    Purge_Area
    
    SQUIGGLY_PURGE
    STATUS_PRINTING
	
	
#####################################################################
#  End Script
##################################################################### 

[gcode_macro print_end]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-2.5 F1800                   ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M18
    M107                                     ; turn off fan
    
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

#####################################################################
#   SQUIGGLY_PURGE
#####################################################################

[gcode_macro SQUIGGLY_PURGE]
gcode:
    # Mathematical constants
    {% set TAU = 6.28318 %}
    {% set PI = 3.14159 %}
    {% set FACTORIALS = [1, 2, 24, 720, 40320, 3628800, 479001600, 87178291200, 20922789888000] %}
    
    # Base macro parameters
    {% set prime_line_steps = params.STEPS|default(16)|int %}
    {% set prime_line_periods = params.PERIODS|default(10)|int %}
    {% set prime_line_amplitude = params.AMPLITUDE|default(5.0)|float %}
    {% set prime_line_period_length = params.PERIOD_LENGTH|default(5.0)|float %}
    {% set prime_line_purge_distance = params.PURGE_LENGTH|default(100.0)|float %}
    {% set prime_line_flowrate = params.FLOWRATE|default(10.0)|float %}
    {% set prime_line_height = params.LINE_HEIGHT|default(0.6)|float %}
    {% set prime_line_unretract_length = params.UNRETRACT_LENGTH|default(5.0)|float %}
    {% set prime_line_direction = params.LINE_DIRECTION|default("X")|string|upper %}
    {% set prime_line_margin = params.LINE_MARGIN|default(15.0)|float %} # Used only in adaptive mode
    {% set prime_line_adaptive = params.ADAPTIVE_MODE|default(1)|int %}
    {% set verbose = params.VERBOSE|default(1)|int %}

    # If the SIZE parameter is defined and not a dummy placeholder, we use it to do the adaptive bed mesh logic
    {% set coordinates_found = False %}
    {% if params.SIZE is defined and params.SIZE != "0_0_0_0" %}
        {% set xMinSpec, yMinSpec, xMaxSpec, yMaxSpec = params.SIZE.split('_')|map('trim')|map('int') %}
        {% set coordinates_found = True %}
    {% elif printer.exclude_object is defined %}
        {% if printer.exclude_object.objects %}
            # Else if SIZE is not defined, we fallback to use the [exclude_object] tags
            # This method is derived from Kyleisah KAMP repository: https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging)
            {% set eo_points = printer.exclude_object.objects|map(attribute='polygon')|sum(start=[]) %}
            {% set xMinSpec = eo_points|map(attribute=0)|min %}
            {% set yMinSpec = eo_points|map(attribute=1)|min %}
            {% set xMaxSpec = eo_points|map(attribute=0)|max %}
            {% set yMaxSpec = eo_points|map(attribute=1)|max %}
            {% set coordinates_found = True %}
        {% endif %}
    {% endif %}

    # We get the default prime line position parameters
    {% set prime_line_x = params.START_X|default(5.0)|float %}
    {% set prime_line_y = params.START_Y|default(3.5)|float %}
    {% set center_x, center_y = [printer.toolhead.axis_maximum.x / 2, printer.toolhead.axis_maximum.y / 2]|map("float") %}

    # Account for the amplitude (height) of the purge line
    {% if prime_line_direction == "X" %}
        {% set offset_x, offset_y = 0, prime_line_amplitude/2 %}
    {% else %}
        {% set offset_x, offset_y = prime_line_amplitude/2, 0 %}
    {% endif %}

    # If first layer coordinates are retrieved and adaptive mode is enabled, then we replace the coordinates to
    # do an adaptive purge while being careful to have the line stay on the bed when the first layer
    # is in an opposite bed quadrant than the prime line initial coordinates (due to mirrored coordinates from center axes)...
    {% if coordinates_found and prime_line_adaptive == 1 %}
        {% set prime_line_x = 2*center_x - prime_line_x if (prime_line_x > center_x and xMaxSpec < center_x) or (prime_line_x < center_x and xMinSpec > center_x) 
                               else prime_line_x %}
        {% set prime_line_y = 2*center_y - prime_line_y if (prime_line_y > center_y and yMaxSpec < center_y) or (prime_line_y < center_y and yMinSpec > center_y) 
                               else prime_line_y %}
        {% set prime_line_x = [[prime_line_x, xMinSpec - prime_line_margin - offset_x]|max, xMaxSpec + prime_line_margin + offset_x]|min %}
        {% set prime_line_y = [[prime_line_y, yMinSpec - prime_line_margin - offset_y]|max, yMaxSpec + prime_line_margin + offset_y]|min %}
    {% endif %}

    # Choose the way of printing the primeline (in + or -) alongside the direction to avoid going outside the bed boundaries
    {% set prime_line_way = -1 if (prime_line_direction == "X" and prime_line_x > center_x) or (prime_line_direction == "Y" and prime_line_y > center_y) else 1 %}

    # Calculate steps
    {% set steps = [] %}
    {% set state = namespace(cur_y=prime_line_y, prime_line_length=0.0, cos=0.0) %}

    {% for step in range(1, prime_line_periods * prime_line_steps + 1) %}
        {% set sign = cycler(1.0, -1.0) %}
        {% set state.cos = 0.0 %}
        {% set rad_angle = step / prime_line_steps * TAU %}
        {% for i in range(0, FACTORIALS|length) %}
            {% set cos_step = sign.next() * ((rad_angle%TAU)**(2*i) / FACTORIALS[i]) %}
            {% set state.cos = state.cos + cos_step %}
        {% endfor %}
        {% set dist_x = step * prime_line_period_length / prime_line_steps %}
        {% set dist_y = prime_line_amplitude * (0.5 - (0.5 * state.cos)) %}
        {% set rel_x = prime_line_period_length/prime_line_steps %}
        {% set rel_y = prime_line_y + dist_y - state.cur_y %}
        {% set e_length = (rel_x**2 + rel_y**2)**0.5 %}
        {% set state.cur_y = state.cur_y + rel_y %}
        {% set state.prime_line_length = state.prime_line_length + e_length %}
        {% set _ = steps.append((rel_x, rel_y, e_length)) %}
    {% endfor %}
    
    {% set max_extrude_cross_section = printer["configfile"].config["extruder"]["max_extrude_cross_section"]|float %}
    {% set filament_diameter = printer["configfile"].config["extruder"]["filament_diameter"]|float %}
    {% set filament_area = PI * (filament_diameter / 2)**2 %}
    
    # We first compute the width of the prime line
    {% set purge_volume = prime_line_purge_distance * filament_area %}
    {% set line_width = purge_volume / (prime_line_height * state.prime_line_length) %}

    # Then we check that the prime line cross section will not be problematic (exceeding Klipper max_extrude_cross_section)
    # or, if it's the case, we warn the user and add a correction to the length of filament to be purged
    {% if (prime_line_height * line_width) > max_extrude_cross_section %}
        {% if verbose %}
            {action_respond_info("The prime_line_purge_distance of %.4f mm is too high and will exceed the max_extrude_cross_section!" % prime_line_purge_distance)}
        {% endif %}
        {% set prime_line_purge_distance = 0.98 * (max_extrude_cross_section * state.prime_line_length) / filament_area %}
        {% set purge_volume = prime_line_purge_distance * filament_area %}
        {% set line_width = purge_volume / (prime_line_height * state.prime_line_length) %}
        {% if verbose %}
            {action_respond_info("Corrected the prime_line_purge_distance to %.4f mm" % prime_line_purge_distance)}
        {% endif %}
    {% endif %}

    # We then compute the height to width ratio and validate that the prime line will not be too thin
    {% if (prime_line_height / line_width) >= 0.5 %} # TODO: validate this 1/2 ratio is good for all
        {action_raise_error("The prime line will be too thin %.4f x %.4f and will probably not stick properly to the bed. Increase its purge distance or decrease its length!" % (prime_line_height, line_width))}
    {% endif %}

    # Finally we compute the speed to get the correct flowrate for the prime line
    {% set speed = (prime_line_flowrate / (prime_line_height * line_width)) * 60 |float %}

    G91
    M83
    {% if (printer.toolhead.position.z < 5) %}
        G1 Z5 F600
    {% endif %}

    # Starting position
    G90
    G0 X{prime_line_x} Y{prime_line_y} F18000

    # Add some extra squish to the prime line 
    G1 Z{prime_line_height*0.8} F600

    # Add pressure in the nozzle
    G92 E0
    G1 E{prime_line_unretract_length} F300

    # Prime line
    G92 E0
    G91
    {% if prime_line_direction == "X" %}
        {% for x,y,e in steps %}
            G1 X{x*prime_line_way} Y{y} E{e/state.prime_line_length*prime_line_purge_distance} F{speed}
        {% endfor %}
    {% elif prime_line_direction == "Y" %}
        {% for y,x,e in steps %}
            G1 X{x} Y{y*prime_line_way} E{e/state.prime_line_length*prime_line_purge_distance} F{speed}
        {% endfor %}
    {% else %}
        { action_respond_error("Prime line direction is not valid. Choose either X or Y in the variables.cfg file!") }
    {% endif %}
    G90
    
    # Retract and Z-hop
    G92 E0
    G1 E-0.2 F2100
    G92 E0
    G1 Z3 F600

    # Additional small movement to get out of the line as some slicers directly emmit
    # a Z- move as a first step that make the toolhead crash back in the line and get dirty
    G91
    G1 X5 Y5 F18000
    G90
    
    # Flushing Klipper's buffer to ensure the primeline sequence is done before continuing
    M400

#####################################################################
#   Home and Gentry
#####################################################################
[gcode_macro g32]
gcode:
    G28
    QUAD_GANTRY_LEVEL
    G28
    G0 X90 Y90 Z30 F3600

[gcode_macro _CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

#####################################################################
#  Parking Macros
#####################################################################


[gcode_macro Center_Front]
gcode:
 G0 X90 Y30 Z70 F3600


[gcode_macro Belt_Tension]
gcode:
 G0 X90 Y90 Z100 F3600

[gcode_macro Front_without_Z]
gcode:
 G0 X90 Y20 F3600

[gcode_macro middle]
gcode:
 G0 X90 Y90 Z10 F10000

[gcode_macro Purge_Area]
gcode:
    _CG28                              ; home if not already homed
    SAVE_GCODE_STATE NAME=Purge_Area
    G90                                ; absolute positioning
    G0 X1 Y150  F20000
    G0 X1 Y150 F5000                                    
    RESTORE_GCODE_STATE NAME=Purge_Area

#####################################################################
#  Cold Pull
#####################################################################

[gcode_macro Clean_Filament_Cold_Pull]
description: Sparta3D Cleaning Filament Cold Pull, Thank you Vince
gcode:
## -- Set Extruder Temp
    {% set TEMP = params.TEMP|default(260)|float %}
## -- Resting Temp
    {% set REST_TEMP = params.REST_TEMP|default(50)|float %}
## -- Set Pulling Extruder Temp
    {% set PULL_TEMP = params.PULL_TEMP|default(130)|float %}

## --
    M109 S{TEMP}                ; Turn on Heaters
    M106 S128                   ; Part Cooling Fan
    G1 E50 F2000                ; Pull in Filament 
    G1 E100 F150                ; Slow Extrude
    M400
    M109 S{REST_TEMP}           ; Cooldown
    M109 S{PULL_TEMP}           ; Temp Set for pulling
    G4 P{2 * 60000}             ; Dwell for 2 min
    BEEP I=3 DUR=100 FREQ=1000  ;Beeps lets you know it's ready
    G4 P{1 * 60000}             ; Dwell for 1 min
    M104 S0                     ; Turn Off Hotend
    G4 P{1 * 60000}             ; Dwell for 1 min
    M106 S0                     ; Turn Off Fans

 
#####################################################################
#  LOAD_Filament
#####################################################################

[gcode_macro LOAD_FILAMENT]
variable_load_distance:  50
variable_purge_distance:  75
gcode:
    {% set speed = params.SPEED|default(150) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 30 %}
    SAVE_GCODE_STATE NAME=load_state
    G90
    Purge_Area
    G91
    G92 E0
    G1 E{load_distance} F{max_velocity} # fast-load
    G1 E{purge_distance} F{speed} # purge
    RESTORE_GCODE_STATE NAME=load_state            

#####################################################################
#  UNLOAD_Filament
#####################################################################

[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance:  100
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(150) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 30 %}
    SAVE_GCODE_STATE NAME=unload_state
    G90
    Purge_Area
    G91
    G92 E0
    G1 E{purge_distance} F{speed} # purge
    G1 E-{unload_distance} F{max_velocity} # fast-unload
    RESTORE_GCODE_STATE NAME=unload_state


[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : True  ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 5  ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 150 ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 2.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 1.0   ; the value to retract while PAUSE
variable_cancel_retract   : 5.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 35.0  ; retract speed in mm/s
variable_unretract        : 1.0   ; the value to unretract while RESUME
variable_speed_unretract  : 35.0  ; unretract speed in mm/s
variable_speed_hop        : 15.0  ; z move speed in mm/s
variable_speed_move       : 100.0 ; move speed in mm/s
variable_park_at_cancel   : True  ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : 21 ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : 150 ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
# !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
variable_use_fw_retract   : False  ; use fw_retraction instead of the manual version [True/False]
variable_idle_timeout     : 0      ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
gcode:

#####################################################################
#  Pause
#####################################################################

[gcode_macro PAUSE]

description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  ##### get user parameters or use default ##### 
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set idle_timeout = client.idle_timeout|default(0) %}
  {% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
  {% set restore = False if printer.toolhead.extruder == ''
              else True  if params.RESTORE|default(1)|int == 1 else False %}
  ##### end of definitions #####
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
  # set a new idle_timeout value
  {% if idle_timeout > 0 %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
    SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
  {% endif %} 
  PAUSE_BASE
  {client.user_pause_macro|default("")}
  _TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}


#####################################################################
#  Resume
#####################################################################

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
variable_last_extruder_temp: {'restore': False, 'temp': 0}
variable_restore_idle_timeout: 0
variable_idle_state: False
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set sp_move = client.speed_move|default(velocity) %}
  {% set runout_resume = True if client.runout_sensor|default("") == ""     # no runout
                    else True if not printer[client.runout_sensor].enabled  # sensor is disabled
                    else printer[client.runout_sensor].filament_detected %} # sensor status
  {% set can_extrude = True if printer.toolhead.extruder == ''           # no extruder defined in config
                  else printer[printer.toolhead.extruder].can_extrude %} # status of active extruder
  {% set do_resume = False %}
  {% set prompt_txt = [] %}
  ##### end of definitions #####
  #### Printer comming from timeout idle state ####
  {% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
    {% if last_extruder_temp.restore %}
      # we need to use the unicode (\u00B0) for the ° as py2 env's would throw an error otherwise 
      RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
      M109 S{last_extruder_temp.temp}
      {% set do_resume = True %}
    {% elif can_extrude %}
      {% set do_resume = True %}
    {% else %} 
      RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
      {% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
    {% endif %}
  #### Printer comming out of regular PAUSE state ####
  {% elif can_extrude %}
    {% set do_resume = True %}
  {% else %}
    RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
    {% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
  {% endif %}
  {% if runout_resume %}
    {% if do_resume %}
      {% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %} # restore idle_timeout time
      {client.user_resume_macro|default("")}
      _CLIENT_EXTRUDE
      RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
    {% endif %}
  {% else %}
    RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
    {% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
  {% endif %}
  ##### Generate User Information box in case of abort #####
  {% if not (runout_resume and do_resume) %} 
    RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
    {% for element in prompt_txt %}
      RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}' 
    {% endfor %}
    RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
    RESPOND TYPE=command MSG="action:prompt_show"
  {% endif %}

#####################################################################
#  Cancel
#####################################################################

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE



#####################################################################
#   Toolhead Leds
#####################################################################

[gcode_macro _sb_vars]
# User settings for the StealthBurner status leds. You can change the status colors and led
# configurations for the logo and nozzle here.
variable_colors: {
        'logo': { # Colors for logo states
            'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},
            'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},
            'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},
            'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},
            'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},
            'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},
            'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},
        },
        'nozzle': { # Colors for nozzle states
            'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},
            'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},
            'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},
        },
        'thermal': {
            'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}
        }
    }
variable_logo_led_name:         "sb_leds" 
# The name of the addressable LED chain that contains the logo LED(s)
variable_logo_idx:              "1" 
# A comma-separated list of indexes LEDs in the logo
variable_nozzle_led_name:       "sb_leds"
# The name of the addressable LED chain that contains the nozzle LED(s). This will
# typically be the same LED chain as the logo.
variable_nozzle_idx:            "2,3"
# A comma-separated list of indexes of LEDs in the nozzle
gcode:
    # This section is required.  Do Not Delete.


[gcode_macro _set_sb_leds]
gcode:
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set led = params.LED|string %}
    {% set idx = (params.IDX|string).split(',') %}
    {% set transmit_last = params.TRANSMIT|default(1) %}

    {% for led_index in idx %}
        {% set transmit=transmit_last if loop.last else 0 %}
        set_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}
    {% endfor %}

[gcode_macro _set_sb_leds_by_name]
gcode:
    {% set leds_name = params.LEDS %}
    {% set color_name = params.COLOR %}
    {% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}
    {% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}
    {% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}
    {% set transmit = params.TRANSMIT|default(1) %}

    _set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}

[gcode_macro _set_logo_leds]
gcode:
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set led = printer["gcode_macro _sb_vars"].logo_led_name %}
    {% set idx = printer["gcode_macro _sb_vars"].logo_idx %}
    {% set transmit=params.TRANSMIT|default(1) %}

    _set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro _set_nozzle_leds]
gcode:
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}
    {% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}
    {% set transmit=params.TRANSMIT|default(1) %}

    _set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}


[gcode_macro set_logo_leds_off]
gcode:
    {% set transmit=params.TRANSMIT|default(1) %}
    _set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}

[gcode_macro set_nozzle_leds_on]
gcode:
    {% set transmit=params.TRANSMIT|default(1) %}
    _set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}

[gcode_macro set_nozzle_leds_off]
gcode:
    {% set transmit=params.TRANSMIT|default(1) %}
    _set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}

[gcode_macro status_off]
gcode:
    set_logo_leds_off transmit=0
    set_nozzle_leds_off

[gcode_macro status_ready]
gcode:
    _set_sb_leds_by_name leds="logo" color="standby" transmit=0
    _set_sb_leds_by_name leds="nozzle" color="standby" transmit=1

[gcode_macro status_busy]
gcode:
    _set_sb_leds_by_name leds="logo" color="busy" transmit=0
    set_nozzle_leds_on

[gcode_macro status_heating]
gcode:
    _set_sb_leds_by_name leds="logo" color="heating" transmit=0
    _set_sb_leds_by_name leds="nozzle" color="heating" transmit=1

[gcode_macro status_leveling]
gcode:
    _set_sb_leds_by_name leds="logo" color="leveling" transmit=0
    set_nozzle_leds_on

[gcode_macro status_homing]
gcode:
    _set_sb_leds_by_name leds="logo" color="homing" transmit=0
    set_nozzle_leds_on

[gcode_macro status_cleaning]
gcode:
    _set_sb_leds_by_name leds="logo" color="cleaning" transmit=0
    set_nozzle_leds_on

[gcode_macro status_meshing]
gcode:
    _set_sb_leds_by_name leds="logo" color="meshing" transmit=0
    set_nozzle_leds_on

[gcode_macro status_calibrating_z]
gcode:
    _set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0
    set_nozzle_leds_on

[gcode_macro status_printing]
gcode:
    _set_sb_leds_by_name leds="logo" color="printing" transmit=0
    set_nozzle_leds_on

#####################################################################
#   Spoolman
#####################################################################

[gcode_macro SET_ACTIVE_SPOOL]
gcode:
  {% if params.ID %}
    {% set id = params.ID|int %}
    {action_call_remote_method(
       "spoolman_set_active_spool",
       spool_id=id
    )}
  {% else %}
    {action_respond_info("Parameter 'ID' is required")}
  {% endif %}

[gcode_macro CLEAR_ACTIVE_SPOOL]
gcode:
  {action_call_remote_method(
    "spoolman_set_active_spool",
    spool_id=None
  )}

#####################################################################
#   TachoCheck
#####################################################################
